// undistort_image.cpp:
// Load the calibration coefficients and use them to undistort the input from
// a camera


#include <opencv2/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>

// Load the matrix and distortion coefficients from the file generated by the
// calibration tool
void loadCoefficients(const std::string& filename,
                      cv::Mat& camera_matrix,
                      cv::Mat& distCoeffs)
{
  cv::FileStorage fs( filename, cv::FileStorage::READ );
  if (!fs.isOpened())
  {
    throw std::runtime_error("Could not open file " + filename);
  }
  fs["camera_matrix"] >> camera_matrix;
  fs["distortion_coefficients"] >> distCoeffs;
  fs.release();
}

// Capture the video stream from a camera, and undistort it using the
// calibration parameters
void processVideo()
{
  cv::VideoCapture vc;
  if(vc.open(0)) {
    // Set up the capture device properties
    if (!(vc.set(cv::CAP_PROP_FRAME_WIDTH, 1280)
          && vc.set(cv::CAP_PROP_FRAME_HEIGHT, 1024)
          && vc.set(cv::CAP_PROP_FPS, 30)))
    {
      throw std::runtime_error("Failed to set parameters");
    }
  }
  else throw std::runtime_error("Failed to open the camera");

  cv::Mat frame, frameUndist;
  cv::namedWindow( "Original", cv::WINDOW_AUTOSIZE );
  cv::namedWindow( "Undistorted", cv::WINDOW_AUTOSIZE );

  cv::Mat cameraMatrix, distCoeffs;
  loadCoefficients("../config/intrinsic_calibration.xml", cameraMatrix, distCoeffs);

  bool terminating = false;
  while (!terminating)
  {
    if(!vc.read(frame))
    {
      throw std::runtime_error("Failed to grab frame");
    }
    undistort(frame, frameUndist, cameraMatrix, distCoeffs);

    cv::imshow( "Original", frame);
    cv::imshow( "Undistorted", frameUndist);
    char c;
    c = cv::waitKey(30);
    switch (c)
    {
      case 'q':
        std::cout << "Terminating!" << std::endl;
        terminating = true;
        break;
      default:
        break;
    }
  }
  cv::destroyAllWindows();
}

int main()
{
  processVideo();
  return 0;
}
